# Extended website development protocol

## 1. Core configuration

### 1.1 Development process principles
- Adherence to clean code principles
- Security first
- Performance optimization
- Maintainable code design
- Team-oriented implementation
- Compliance with coding standards
- Quality assurance through simulation
- Test-driven development (TDD) practice
- Continuous integration/delivery
- Proactive management of technical debt

### 1.2 System architecture components

#### Performance monitoring
- Response time tracking
- Resource utilization monitoring
- Usage pattern analysis
- Performance report generation
- Identification of optimization opportunities
- Real-time metrics collection
- User experience metrics

#### Search optimization
- Context-aware search implementation
- Semantic search functionality
- Search performance optimization
- Fuzzy match support
- Multilingual search support
- Search result personalization

#### Microservices architecture
- Service decomposition strategy
- API gateway design
- Inter-service communication
- Fault recovery mechanism
- Scaling strategy
- Monitoring integration

## 2. Required pre-implementation verification

### 2.1 Source file analysis
- Detailed analysis of existing files
- Module dependency verification
- Coding standard compliance check
- Cyclomatic complexity evaluation
- Code metrics measurement
- Security vulnerability scan

### 2.2 Impact assessment
- Identification of areas requiring changes
- Code dependency verification
- Change impact scope evaluation
- Refactoring necessity evaluation
- Performance impact analysis
- Security risk assessment
- User experience impact

### 2.3 Compatibility verification
- Interface definition review
- API specification consistency check
- Process flow verification
- Existing function impact evaluation
- Cross browser compatibility
- Mobile compatibility
- Accessibility compliance

## 3. Project information format

# Project overview
- Project name: [Name]
- Development period: [Period]
- Team size: [Number of people]
- Architecture requirements: [Specifications]

# Development environment
- Language: [Programming language]
- Framework: [Framework name]
- Database: [DB type]
- Development tool: [Tool list]
- Monitoring tool: [Tool list]
- CI/CD tool: [Tool list]

# Requirements
- Functional requirements: [Specific functions]
- Non-functional requirements: [Constraints]
- Performance goals: [Metrics]
- Security requirements: [Criteria]

## 4. Code generation criteria

### 4.1 Quality criteria
1. Code readability
- Compliance with framework-specific naming rules
- Clear documentation
- Consistent structure
- Appropriate comments
- Self-documenting code

2. Maintainability
- Modular design
- Loose coupling
- Testability
- Minimization of dependencies
- Elimination of code duplication

3. Security
- Input validation
- Appropriate authentication/authorization
- Secure communication
- XSS/CSRF countermeasures
- SQL injection prevention

4. Performance
- Efficient algorithms
- Resource optimization
- Scalability
- Leverage asynchronous processing
- Optimize memory management

## 5. Quality management framework

### Monitoring and analysis
- System performance tracking
- Usage pattern analysis
- Performance report generation
- Identify optimization opportunities
- User behavior analysis
- Error tracking and analysis
- Security monitoring

### Continuous improvement
- Periodic performance reviews
- System scaling strategy
- Resource optimization
- Code quality metrics
- Technical debt management
- Architecture evolution
- Team capability improvement

## 6. Review checklist
- [ ] Alignment with requirements
- [ ] Coding standard compliance
- [ ] Security measures implementation
- [ ] Performance optimization
- [ ] Search function efficiency
- [ ] Test coverage
- [ ] Document completeness
- [ ] Simulation execution
- [ ] Problem resolution verification
- [ ] Accessibility support
- [ ] Mobile-friendly
- [ ] SEO-optimized

## 7. Best practices
- Apply SOLID principles
- Use design patterns
- Optimized search implementation
- Continuous integration
- Perform code reviews
- Maintain technical documentation
- Performance monitoring
- Thorough simulation
- Security-first development
- Facilitate team collaboration

## 8. Anti-patterns
- Excessive complexity
- Improper exception handling
- Ignoring security vulnerabilities
- Unoptimized search
- Insufficient testing
- Inefficient resource use
- Lack of monitoring
- Omitting simulations
- Lack of documentation
- Ignoring technical debt

## 9. Usage guidelines
1. Enter project information
2. State specific requirements
3. Provide additional information as needed
4. Determine test strategy
5. Define search requirements
6. Run simulations
7. Performance validation
8. Identify and resolve issues
9. Request code reviews
10. Implement and verify improvements
