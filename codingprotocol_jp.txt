# 拡張Webサイト開発プロトコル

## 1. コア設定

### 1.1 開発プロセスの原則
- クリーンコード原則の厳守
- セキュリティ最優先
- パフォーマンス最適化
- 保守可能なコード設計
- チーム指向の実装
- コーディング標準への準拠
- シミュレーションによる品質保証
- テスト駆動開発（TDD）の実践
- 継続的インテグレーション/デリバリー
- 技術的負債の積極的管理

### 1.2 システムアーキテクチャコンポーネント

#### パフォーマンスモニタリング
- レスポンスタイム追跡
- リソース使用率モニタリング
- 使用パターン分析
- パフォーマンスレポート生成
- 最適化機会の特定
- リアルタイムメトリクス収集
- ユーザーエクスペリエンス指標

#### 検索最適化
- コンテキスト認識検索の実装
- セマンチック検索機能
- 検索パフォーマンス最適化
- あいまい一致サポート
- 多言語検索対応
- 検索結果のパーソナライゼーション

#### マイクロサービスアーキテクチャ
- サービス分割戦略
- APIゲートウェイ設計
- サービス間通信
- 障害回復メカニズム
- スケーリング戦略
- モニタリング統合

## 2. 必須の事前実装検証

### 2.1 ソースファイル分析
- 既存ファイルの詳細分析
- モジュール依存関係の検証
- コーディング標準準拠確認
- 循環的複雑度の評価
- コードメトリクスの測定
- セキュリティ脆弱性スキャン

### 2.2 影響評価
- 変更が必要な領域の特定
- コード依存関係の検証
- 変更影響範囲の評価
- リファクタリングの必要性評価
- パフォーマンス影響分析
- セキュリティリスク評価
- ユーザーエクスペリエンス影響

### 2.3 互換性検証
- インターフェース定義レビュー
- API仕様一貫性チェック
- プロセスフロー検証
- 既存機能影響評価
- クロスブラウザ互換性
- モバイル対応性
- アクセシビリティ準拠

## 3. プロジェクト情報フォーマット

# プロジェクト概要
- プロジェクト名: [名称]
- 開発期間: [期間]
- チーム規模: [人数]
- アーキテクチャ要件: [仕様]

# 開発環境
- 言語: [プログラミング言語]
- フレームワーク: [フレームワーク名]
- データベース: [DB種類]
- 開発ツール: [ツールリスト]
- モニタリングツール: [ツールリスト]
- CI/CDツール: [ツールリスト]

# 要件
- 機能要件: [具体的機能]
- 非機能要件: [制約条件]
- パフォーマンス目標: [メトリクス]
- セキュリティ要件: [基準]

## 4. コード生成基準

### 4.1 品質基準
1. コード可読性
   - フレームワーク固有の命名規則遵守
   - 明確なドキュメンテーション
   - 一貫した構造
   - 適切なコメント
   - 自己文書化コード

2. 保守性
   - モジュラー設計
   - 疎結合
   - テスト容易性
   - 依存関係の最小化
   - コード重複の排除

3. セキュリティ
   - 入力検証
   - 適切な認証/認可
   - セキュアな通信
   - XSS/CSRF対策
   - SQLインジェクション防止

4. パフォーマンス
   - 効率的なアルゴリズム
   - リソース最適化
   - スケーラビリティ
   - 非同期処理の活用
   - メモリ管理の最適化

### 4.2 シミュレーションと検証基準
1. 内部シミュレーション
   - コード生成後の必須検証プロセス
   - 複数のシナリオでの動作確認
   - エッジケースの検証
   - パフォーマンス検証
   - セキュリティ検証

2. 不具合対応
   - エラー検出時の代替アプローチ検討
   - 異なる実装方法の評価
   - 解決策の比較分析
   - 最適解の選択

## 5. 品質管理フレームワーク

### モニタリングと分析
- システムパフォーマンス追跡
- 使用パターン分析
- パフォーマンスレポート生成
- 最適化機会の特定
- ユーザー行動分析
- エラー追跡と分析
- セキュリティ監視

### 継続的改善
- 定期的なパフォーマンスレビュー
- システムスケーリング戦略
- リソース最適化
- コード品質メトリクス
- 技術的負債の管理
- アーキテクチャ進化
- チーム能力向上

## 6. レビューチェックリスト
- [ ] 要件との整合性
- [ ] コーディング標準準拠
- [ ] セキュリティ対策実装
- [ ] パフォーマンス最適化
- [ ] 検索機能効率
- [ ] テストカバレッジ
- [ ] ドキュメント完全性
- [ ] シミュレーション実行
- [ ] 問題解決検証
- [ ] アクセシビリティ対応
- [ ] モバイル対応
- [ ] SEO最適化

## 7. ベストプラクティス
- SOLID原則の適用
- デザインパターンの活用
- 最適化された検索実装
- 継続的インテグレーション
- コードレビューの実施
- 技術文書の保守
- パフォーマンスモニタリング
- 徹底的なシミュレーション
  - コード生成後の必須内部検証
  - 複数アプローチの検討
  - 不具合発生時の再実装
  - 継続的な検証プロセス
- セキュリティファーストの開発
- チーム協働の促進

## 8. アンチパターン
- 過度の複雑性
- 不適切な例外処理
- セキュリティ脆弱性の無視
- 最適化されていない検索
- 不十分なテスト
- 非効率なリソース使用
- モニタリングの欠如
- シミュレーションの省略
- ドキュメント不足
- 技術的負債の無視

## 9. 使用ガイドライン
1. プロジェクト情報の入力
2. 具体的要件の提示
3. 必要に応じた追加情報の提供
4. テスト戦略の決定
5. 検索要件の定義
6. シミュレーションの実行
   - コード生成後の内部検証実施
   - 動作確認と問題点の特定
   - 不具合時の代替アプローチ検討
   - 再実装と再検証の実行
7. パフォーマンス検証
8. 問題の特定と解決
9. コードレビューの依頼
10. 改善の実装と検証