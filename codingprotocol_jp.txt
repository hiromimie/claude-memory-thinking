# 拡張Webサイト開発プロトコル

## 1. コア設定

### 1.1 開発プロセスの原則
- クリーンコード原則の遵守
- セキュリティを最優先
- パフォーマンスの最適化
- 保守可能なコード設計
- チーム指向の実装
- コーディング標準への準拠
- シミュレーションによる品質保証

### 1.2 システムアーキテクチャコンポーネント

#### キャッシュ管理システム
- 適応型キャッシュ戦略の実装
- キャッシュ階層の最適化
- キャッシュパフォーマンスの監視
- インテリジェントなプリフェッチの実装
- キャッシュ一貫性の維持

#### パフォーマンス監視
- レスポンスタイムの追跡
- リソース使用率の監視
- 使用パターンの分析
- パフォーマンスレポートの生成
- 最適化機会の特定

#### 検索最適化
- コンテキスト認識検索の実装
- セマンティック検索機能
- 検索パフォーマンスの最適化
- キャッシュシステムとの統合
- あいまい一致のサポート

## 2. 必須の事前実装検証

### 2.1 ソースファイル分析
```javascript
// ファイル読み込みの例
const fileContent = await window.fs.readFile('path/to/file', { encoding: 'utf8' });
console.log(fileContent);
```

- 既存ファイルの詳細分析
- モジュール依存関係の検証
- コーディング標準への準拠確認
- キャッシュ影響評価

### 2.2 影響評価
- 変更が必要な領域の特定
- コード依存関係の検証
- 変更影響範囲の評価
- リファクタリングの必要性評価
- パフォーマンスへの影響分析

### 2.3 互換性検証
- インターフェース定義のレビュー
- API仕様の一貫性チェック
- プロセスフローの検証
- 既存機能への影響評価
- キャッシュ一貫性の検証

## 3. プロジェクト情報フォーマット

```markdown
# プロジェクト概要
- プロジェクト名: [名称]
- 開発期間: [期間]
- チーム規模: [人数]
- キャッシュ要件: [仕様]

# 開発環境
- 言語: [プログラミング言語]
- フレームワーク: [フレームワーク名]
- データベース: [DB種類]
- 開発ツール: [ツール一覧]
- 監視ツール: [ツール一覧]

# 要件
- 機能要件: [具体的な機能]
- 非機能要件: [制約事項]
- パフォーマンス目標: [指標]
```

## 4. コード生成基準

### 4.1 品質基準
1. コードの可読性
   - フレームワーク固有の命名規則への準拠
   - 明確なドキュメント
   - 一貫した構造

2. 保守性
   - モジュラー設計
   - 疎結合
   - テスト可能性

3. セキュリティ
   - 入力値検証
   - 適切な認証/認可
   - 安全な通信

4. パフォーマンス
   - 効率的なアルゴリズム
   - リソースの最適化
   - スケーラビリティ

## 5. データ最適化

### 5.1 キャッシュ戦略
```javascript
// キャッシュ実装例
class CacheManager {
    constructor() {
        this.cache = new Map();
        this.maxSize = 1000;
    }

    set(key, value, ttl = 3600) {
        if (this.cache.size >= this.maxSize) {
            this.evictOldest();
        }
        this.cache.set(key, {
            value,
            timestamp: Date.now(),
            ttl
        });
    }

    get(key) {
        const item = this.cache.get(key);
        if (!item) return null;
        if (Date.now() - item.timestamp > item.ttl * 1000) {
            this.cache.delete(key);
            return null;
        }
        return item.value;
    }

    evictOldest() {
        const oldest = [...this.cache.entries()]
            .sort(([,a], [,b]) => a.timestamp - b.timestamp)[0];
        if (oldest) this.cache.delete(oldest[0]);
    }
}
```

- 階層化キャッシュの実装
- キャッシュ無効化ルールの設定
- キャッシュヒット率の最適化
- キャッシュパフォーマンスの監視
- キャッシュウォーミング戦略の実装

### 5.2 パフォーマンス指標
- KPIの定義
- 監視システムの実装
- リソース使用率の追跡
- パフォーマンスレポートの生成
- 最適化機会の特定

### 5.3 検索機能の強化
```javascript
// 検索実装例
class SearchEngine {
    constructor(data) {
        this.data = data;
        this.index = new Map();
        this.buildIndex();
    }

    buildIndex() {
        this.data.forEach((item, id) => {
            const tokens = this.tokenize(item.content);
            tokens.forEach(token => {
                if (!this.index.has(token)) {
                    this.index.set(token, new Set());
                }
                this.index.get(token).add(id);
            });
        });
    }

    search(query) {
        const tokens = this.tokenize(query);
        const results = tokens
            .map(token => this.index.get(token) || new Set())
            .reduce((a, b) => new Set([...a].filter(x => b.has(x))));
        return Array.from(results)
            .map(id => this.data[id])
            .sort((a, b) => b.relevance - a.relevance);
    }

    tokenize(text) {
        return text.toLowerCase()
            .split(/\W+/)
            .filter(token => token.length > 2);
    }
}
```

- 効率的な検索アルゴリズムの実装
- クエリパフォーマンスの最適化
- コンテキスト検索機能の有効化
- 高度なフィルタリングのサポート
- 検索インデックスの保守

## 6. 品質管理フレームワーク

### 監視と分析
- システムパフォーマンスの追跡
- キャッシュ効率の監視
- 使用パターンの分析
- パフォーマンスレポートの生成
- 最適化機会の特定

### 継続的改善
- 定期的なパフォーマンスレビュー
- キャッシュ最適化
- 検索機能の強化
- システムスケーリング戦略
- リソース最適化

## 7. レビューチェックリスト
- [ ] 要件との整合性
- [ ] コーディング標準への準拠
- [ ] セキュリティ対策の実装
- [ ] パフォーマンス最適化
- [ ] キャッシュ戦略の適切性
- [ ] 検索機能の効率性
- [ ] テストカバレッジ
- [ ] ドキュメントの完全性
- [ ] シミュレーションの実行
- [ ] 課題解決の検証

## 8. ベストプラクティス
- SOLIDの原則の適用
- デザインパターンの活用
- 効率的なキャッシュ戦略
- 最適化された検索の実装
- 継続的インテグレーション
- コードレビューの実施
- 技術文書の保守
- パフォーマンス監視
- 徹底的なシミュレーション

## 9. アンチパターン
- 過度な複雑性
- 不適切な例外処理
- セキュリティ脆弱性の看過
- 非効率的なキャッシュ
- 最適化されていない検索
- 不十分なテスト
- 非効率的なリソース使用
- 監視の欠如
- シミュレーションの省略

## 10. 使用ガイドライン
1. プロジェクト情報の入力
2. 具体的な要件の提示
3. 必要に応じた追加情報の提供
4. キャッシュ戦略の決定
5. 検索要件の定義
6. シミュレーションの実行
7. パフォーマンスの検証
8. 課題の特定と解決
9. コードレビューの依頼
10. 改善の実装と検証

このプロトコルは高品質なWebアプリケーション開発をサポートします。必要に応じて追加の詳細要件や制約を提供してください。